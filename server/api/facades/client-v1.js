/**
  Juju Client version 1.
  This API facade is available on model connections.

  NOTE: this file has been generated by the generate command in js-libjuju
  on Wed 2018/07/04 16:57:31 UTC. Do not manually edit this file.
*/

'use strict';


/**
  ClientV1 serves the (v1) client-specific API methods.
*/
class ClientV1 {

  constructor(transport, info) {
    this._transport = transport;
    this._info = info;
    this.version = 1;
  }

  /**
    APIHostPorts returns the API host/port addresses stored in state.

    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          servers: [][]{
            address: {
              value: string,
              type: string,
              scope: string,
              spaceName: string
            },
            port: int
          }
        }
  */
  apiHostPorts(callback) {
    const params = {};
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'APIHostPorts',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      // Handle the response.
      let result;
      // github.com/juju/juju/apiserver/params#APIHostPortsResult
      result = {};
      resp = resp || {};
      result.servers = [];
      resp['servers'] = resp['servers'] || [];
      for (let _s476 = 0; _s476 < resp['servers'].length; _s476++) {
        result.servers[_s476] = [];
        resp['servers'][_s476] = resp['servers'][_s476] || [];
        for (let _s477 = 0; _s477 < resp['servers'][_s476].length; _s477++) {
          // github.com/juju/juju/apiserver/params#HostPort
          result.servers[_s476][_s477] = {};
          resp['servers'][_s476][_s477] = resp['servers'][_s476][_s477] || {};
          // github.com/juju/juju/apiserver/params#Address
          result.servers[_s476][_s477].address = {};
          resp['servers'][_s476][_s477]['Address'] = resp['servers'][_s476][_s477]['Address'] || {};
          result.servers[_s476][_s477].address.value = resp['servers'][_s476][_s477]['Address']['value'];
          result.servers[_s476][_s477].address.type = resp['servers'][_s476][_s477]['Address']['type'];
          result.servers[_s476][_s477].address.scope = resp['servers'][_s476][_s477]['Address']['scope'];
          result.servers[_s476][_s477].address.spaceName = resp['servers'][_s476][_s477]['Address']['space-name'] || undefined;
          result.servers[_s476][_s477].port = resp['servers'][_s476][_s477]['port'];
        }
      }
      callback(null, result);
    });
  }

  /**
    AbortCurrentUpgrade aborts and archives the current upgrade synchronisation
    record, if any.

    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error or null if the operation succeeded.
  */
  abortCurrentUpgrade(callback) {
    const params = {};
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'AbortCurrentUpgrade',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      callback(null, {});
    });
  }

  /**
    There is no documentation for this method.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          url: string,
          channel: string
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error or null if the operation succeeded.
  */
  addCharm(args, callback) {
    // Prepare request parameters.
    let params;
    // github.com/juju/juju/apiserver/params#AddCharm
    params = {};
    args = args || {};
    params['url'] = args.url;
    params['channel'] = args.channel;
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'AddCharm',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      callback(null, {});
    });
  }

  /**
    AddCharmWithAuthorization adds the given charm URL (which must include
    revision) to the model, if it does not exist yet. Local charms are not
    supported, only charm store URLs. See also AddLocalCharm().  The
    authorization macaroon, args.CharmStoreMacaroon, may be omitted, in
    which case this call is equivalent to AddCharm.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          url: string,
          channel: string,
          macaroon: <object>
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error or null if the operation succeeded.
  */
  addCharmWithAuthorization(args, callback) {
    // Prepare request parameters.
    let params;
    // github.com/juju/juju/apiserver/params#AddCharmWithAuthorization
    params = {};
    args = args || {};
    params['url'] = args.url;
    params['channel'] = args.channel;
    // gopkg.in/macaroon.v2-unstable#Macaroon
    params['macaroon'] = {};
    args.macaroon = args.macaroon || {};
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'AddCharmWithAuthorization',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      callback(null, {});
    });
  }

  /**
    AddMachines adds new machines with the supplied parameters.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          params: []{
            series: string,
            constraints: {
              arch: string,
              container: string,
              cores: int,
              cpuPower: int,
              mem: int,
              rootDisk: int,
              tags: []string,
              instanceType: string,
              spaces: []string,
              virtType: string
            },
            jobs: []string,
            disks: []{
              pool: string,
              size: int,
              count: int
            },
            placement: {
              scope: string,
              directive: string
            },
            parentId: string,
            containerType: string,
            instanceId: string,
            nonce: string,
            hardwareCharacteristics: {
              arch: string,
              mem: int,
              rootDisk: int,
              cpuCores: int,
              cpuPower: int,
              tags: []string,
              availabilityZone: string
            },
            addresses: []{
              value: string,
              type: string,
              scope: string,
              spaceName: string
            }
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          machines: []{
            machine: string,
            error: {
              message: string,
              code: string,
              info: {
                macaroon: <object>,
                macaroonPath: string
              }
            }
          }
        }
  */
  addMachines(args, callback) {
    // Prepare request parameters.
    let params;
    // github.com/juju/juju/apiserver/params#AddMachines
    params = {};
    args = args || {};
    params['params'] = [];
    args.params = args.params || [];
    for (let _s478 = 0; _s478 < args.params.length; _s478++) {
      // github.com/juju/juju/apiserver/params#AddMachineParams
      params['params'][_s478] = {};
      args.params[_s478] = args.params[_s478] || {};
      params['params'][_s478]['series'] = args.params[_s478].series;
      // github.com/juju/juju/constraints#Value
      params['params'][_s478]['constraints'] = {};
      args.params[_s478].constraints = args.params[_s478].constraints || {};
      params['params'][_s478]['constraints']['arch'] = args.params[_s478].constraints.arch || undefined;
      // github.com/juju/juju/instance#ContainerType
      params['params'][_s478]['constraints']['container'] = args.params[_s478].constraints.container || undefined;
      params['params'][_s478]['constraints']['cores'] = args.params[_s478].constraints.cores || undefined;
      params['params'][_s478]['constraints']['cpu-power'] = args.params[_s478].constraints.cpuPower || undefined;
      params['params'][_s478]['constraints']['mem'] = args.params[_s478].constraints.mem || undefined;
      params['params'][_s478]['constraints']['root-disk'] = args.params[_s478].constraints.rootDisk || undefined;
      params['params'][_s478]['constraints']['tags'] = [];
      args.params[_s478].constraints.tags = args.params[_s478].constraints.tags || [];
      for (let _s479 = 0; _s479 < args.params[_s478].constraints.tags.length; _s479++) {
        params['params'][_s478]['constraints']['tags'][_s479] = args.params[_s478].constraints.tags[_s479] || undefined;
      }
      params['params'][_s478]['constraints']['instance-type'] = args.params[_s478].constraints.instanceType || undefined;
      params['params'][_s478]['constraints']['spaces'] = [];
      args.params[_s478].constraints.spaces = args.params[_s478].constraints.spaces || [];
      for (let _s480 = 0; _s480 < args.params[_s478].constraints.spaces.length; _s480++) {
        params['params'][_s478]['constraints']['spaces'][_s480] = args.params[_s478].constraints.spaces[_s480] || undefined;
      }
      params['params'][_s478]['constraints']['virt-type'] = args.params[_s478].constraints.virtType || undefined;
      params['params'][_s478]['jobs'] = [];
      args.params[_s478].jobs = args.params[_s478].jobs || [];
      for (let _s481 = 0; _s481 < args.params[_s478].jobs.length; _s481++) {
        // github.com/juju/juju/state/multiwatcher#MachineJob
        params['params'][_s478]['jobs'][_s481] = args.params[_s478].jobs[_s481] || undefined;
      }
      params['params'][_s478]['disks'] = [];
      args.params[_s478].disks = args.params[_s478].disks || [];
      for (let _s482 = 0; _s482 < args.params[_s478].disks.length; _s482++) {
        // github.com/juju/juju/storage#Constraints
        params['params'][_s478]['disks'][_s482] = {};
        args.params[_s478].disks[_s482] = args.params[_s478].disks[_s482] || {};
        params['params'][_s478]['disks'][_s482]['Pool'] = args.params[_s478].disks[_s482].pool;
        params['params'][_s478]['disks'][_s482]['Size'] = args.params[_s478].disks[_s482].size;
        params['params'][_s478]['disks'][_s482]['Count'] = args.params[_s478].disks[_s482].count;
      }
      // github.com/juju/juju/instance#Placement
      params['params'][_s478]['placement'] = {};
      args.params[_s478].placement = args.params[_s478].placement || {};
      params['params'][_s478]['placement']['scope'] = args.params[_s478].placement.scope;
      params['params'][_s478]['placement']['directive'] = args.params[_s478].placement.directive;
      params['params'][_s478]['parent-id'] = args.params[_s478].parentId;
      // github.com/juju/juju/instance#ContainerType
      params['params'][_s478]['container-type'] = args.params[_s478].containerType;
      // github.com/juju/juju/instance#Id
      params['params'][_s478]['instance-id'] = args.params[_s478].instanceId;
      params['params'][_s478]['nonce'] = args.params[_s478].nonce;
      // github.com/juju/juju/instance#HardwareCharacteristics
      params['params'][_s478]['hardware-characteristics'] = {};
      args.params[_s478].hardwareCharacteristics = args.params[_s478].hardwareCharacteristics || {};
      params['params'][_s478]['hardware-characteristics']['arch'] = args.params[_s478].hardwareCharacteristics.arch || undefined;
      params['params'][_s478]['hardware-characteristics']['mem'] = args.params[_s478].hardwareCharacteristics.mem || undefined;
      params['params'][_s478]['hardware-characteristics']['root-disk'] = args.params[_s478].hardwareCharacteristics.rootDisk || undefined;
      params['params'][_s478]['hardware-characteristics']['cpu-cores'] = args.params[_s478].hardwareCharacteristics.cpuCores || undefined;
      params['params'][_s478]['hardware-characteristics']['cpu-power'] = args.params[_s478].hardwareCharacteristics.cpuPower || undefined;
      params['params'][_s478]['hardware-characteristics']['tags'] = [];
      args.params[_s478].hardwareCharacteristics.tags = args.params[_s478].hardwareCharacteristics.tags || [];
      for (let _s483 = 0; _s483 < args.params[_s478].hardwareCharacteristics.tags.length; _s483++) {
        params['params'][_s478]['hardware-characteristics']['tags'][_s483] = args.params[_s478].hardwareCharacteristics.tags[_s483] || undefined;
      }
      params['params'][_s478]['hardware-characteristics']['availability-zone'] = args.params[_s478].hardwareCharacteristics.availabilityZone || undefined;
      params['params'][_s478]['addresses'] = [];
      args.params[_s478].addresses = args.params[_s478].addresses || [];
      for (let _s484 = 0; _s484 < args.params[_s478].addresses.length; _s484++) {
        // github.com/juju/juju/apiserver/params#Address
        params['params'][_s478]['addresses'][_s484] = {};
        args.params[_s478].addresses[_s484] = args.params[_s478].addresses[_s484] || {};
        params['params'][_s478]['addresses'][_s484]['value'] = args.params[_s478].addresses[_s484].value;
        params['params'][_s478]['addresses'][_s484]['type'] = args.params[_s478].addresses[_s484].type;
        params['params'][_s478]['addresses'][_s484]['scope'] = args.params[_s478].addresses[_s484].scope;
        params['params'][_s478]['addresses'][_s484]['space-name'] = args.params[_s478].addresses[_s484].spaceName || undefined;
      }
    }
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'AddMachines',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      // Handle the response.
      let result;
      // github.com/juju/juju/apiserver/params#AddMachinesResults
      result = {};
      resp = resp || {};
      result.machines = [];
      resp['machines'] = resp['machines'] || [];
      for (let _s485 = 0; _s485 < resp['machines'].length; _s485++) {
        // github.com/juju/juju/apiserver/params#AddMachinesResult
        result.machines[_s485] = {};
        resp['machines'][_s485] = resp['machines'][_s485] || {};
        result.machines[_s485].machine = resp['machines'][_s485]['machine'];
        // github.com/juju/juju/apiserver/params#Error
        result.machines[_s485].error = {};
        resp['machines'][_s485]['error'] = resp['machines'][_s485]['error'] || {};
        result.machines[_s485].error.message = resp['machines'][_s485]['error']['message'];
        result.machines[_s485].error.code = resp['machines'][_s485]['error']['code'];
        // github.com/juju/juju/apiserver/params#ErrorInfo
        result.machines[_s485].error.info = {};
        resp['machines'][_s485]['error']['info'] = resp['machines'][_s485]['error']['info'] || {};
        // gopkg.in/macaroon.v2-unstable#Macaroon
        result.machines[_s485].error.info.macaroon = {};
        resp['machines'][_s485]['error']['info']['macaroon'] = resp['machines'][_s485]['error']['info']['macaroon'] || {};
        result.machines[_s485].error.info.macaroon = resp['machines'][_s485]['error']['info']['macaroon'];
        result.machines[_s485].error.info.macaroonPath = resp['machines'][_s485]['error']['info']['macaroon-path'] || undefined;
      }
      callback(null, result);
    });
  }

  /**
    AddMachinesV2 adds new machines with the supplied parameters.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          params: []{
            series: string,
            constraints: {
              arch: string,
              container: string,
              cores: int,
              cpuPower: int,
              mem: int,
              rootDisk: int,
              tags: []string,
              instanceType: string,
              spaces: []string,
              virtType: string
            },
            jobs: []string,
            disks: []{
              pool: string,
              size: int,
              count: int
            },
            placement: {
              scope: string,
              directive: string
            },
            parentId: string,
            containerType: string,
            instanceId: string,
            nonce: string,
            hardwareCharacteristics: {
              arch: string,
              mem: int,
              rootDisk: int,
              cpuCores: int,
              cpuPower: int,
              tags: []string,
              availabilityZone: string
            },
            addresses: []{
              value: string,
              type: string,
              scope: string,
              spaceName: string
            }
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          machines: []{
            machine: string,
            error: {
              message: string,
              code: string,
              info: {
                macaroon: <object>,
                macaroonPath: string
              }
            }
          }
        }
  */
  addMachinesV2(args, callback) {
    // Prepare request parameters.
    let params;
    // github.com/juju/juju/apiserver/params#AddMachines
    params = {};
    args = args || {};
    params['params'] = [];
    args.params = args.params || [];
    for (let _s486 = 0; _s486 < args.params.length; _s486++) {
      // github.com/juju/juju/apiserver/params#AddMachineParams
      params['params'][_s486] = {};
      args.params[_s486] = args.params[_s486] || {};
      params['params'][_s486]['series'] = args.params[_s486].series;
      // github.com/juju/juju/constraints#Value
      params['params'][_s486]['constraints'] = {};
      args.params[_s486].constraints = args.params[_s486].constraints || {};
      params['params'][_s486]['constraints']['arch'] = args.params[_s486].constraints.arch || undefined;
      // github.com/juju/juju/instance#ContainerType
      params['params'][_s486]['constraints']['container'] = args.params[_s486].constraints.container || undefined;
      params['params'][_s486]['constraints']['cores'] = args.params[_s486].constraints.cores || undefined;
      params['params'][_s486]['constraints']['cpu-power'] = args.params[_s486].constraints.cpuPower || undefined;
      params['params'][_s486]['constraints']['mem'] = args.params[_s486].constraints.mem || undefined;
      params['params'][_s486]['constraints']['root-disk'] = args.params[_s486].constraints.rootDisk || undefined;
      params['params'][_s486]['constraints']['tags'] = [];
      args.params[_s486].constraints.tags = args.params[_s486].constraints.tags || [];
      for (let _s487 = 0; _s487 < args.params[_s486].constraints.tags.length; _s487++) {
        params['params'][_s486]['constraints']['tags'][_s487] = args.params[_s486].constraints.tags[_s487] || undefined;
      }
      params['params'][_s486]['constraints']['instance-type'] = args.params[_s486].constraints.instanceType || undefined;
      params['params'][_s486]['constraints']['spaces'] = [];
      args.params[_s486].constraints.spaces = args.params[_s486].constraints.spaces || [];
      for (let _s488 = 0; _s488 < args.params[_s486].constraints.spaces.length; _s488++) {
        params['params'][_s486]['constraints']['spaces'][_s488] = args.params[_s486].constraints.spaces[_s488] || undefined;
      }
      params['params'][_s486]['constraints']['virt-type'] = args.params[_s486].constraints.virtType || undefined;
      params['params'][_s486]['jobs'] = [];
      args.params[_s486].jobs = args.params[_s486].jobs || [];
      for (let _s489 = 0; _s489 < args.params[_s486].jobs.length; _s489++) {
        // github.com/juju/juju/state/multiwatcher#MachineJob
        params['params'][_s486]['jobs'][_s489] = args.params[_s486].jobs[_s489] || undefined;
      }
      params['params'][_s486]['disks'] = [];
      args.params[_s486].disks = args.params[_s486].disks || [];
      for (let _s490 = 0; _s490 < args.params[_s486].disks.length; _s490++) {
        // github.com/juju/juju/storage#Constraints
        params['params'][_s486]['disks'][_s490] = {};
        args.params[_s486].disks[_s490] = args.params[_s486].disks[_s490] || {};
        params['params'][_s486]['disks'][_s490]['Pool'] = args.params[_s486].disks[_s490].pool;
        params['params'][_s486]['disks'][_s490]['Size'] = args.params[_s486].disks[_s490].size;
        params['params'][_s486]['disks'][_s490]['Count'] = args.params[_s486].disks[_s490].count;
      }
      // github.com/juju/juju/instance#Placement
      params['params'][_s486]['placement'] = {};
      args.params[_s486].placement = args.params[_s486].placement || {};
      params['params'][_s486]['placement']['scope'] = args.params[_s486].placement.scope;
      params['params'][_s486]['placement']['directive'] = args.params[_s486].placement.directive;
      params['params'][_s486]['parent-id'] = args.params[_s486].parentId;
      // github.com/juju/juju/instance#ContainerType
      params['params'][_s486]['container-type'] = args.params[_s486].containerType;
      // github.com/juju/juju/instance#Id
      params['params'][_s486]['instance-id'] = args.params[_s486].instanceId;
      params['params'][_s486]['nonce'] = args.params[_s486].nonce;
      // github.com/juju/juju/instance#HardwareCharacteristics
      params['params'][_s486]['hardware-characteristics'] = {};
      args.params[_s486].hardwareCharacteristics = args.params[_s486].hardwareCharacteristics || {};
      params['params'][_s486]['hardware-characteristics']['arch'] = args.params[_s486].hardwareCharacteristics.arch || undefined;
      params['params'][_s486]['hardware-characteristics']['mem'] = args.params[_s486].hardwareCharacteristics.mem || undefined;
      params['params'][_s486]['hardware-characteristics']['root-disk'] = args.params[_s486].hardwareCharacteristics.rootDisk || undefined;
      params['params'][_s486]['hardware-characteristics']['cpu-cores'] = args.params[_s486].hardwareCharacteristics.cpuCores || undefined;
      params['params'][_s486]['hardware-characteristics']['cpu-power'] = args.params[_s486].hardwareCharacteristics.cpuPower || undefined;
      params['params'][_s486]['hardware-characteristics']['tags'] = [];
      args.params[_s486].hardwareCharacteristics.tags = args.params[_s486].hardwareCharacteristics.tags || [];
      for (let _s491 = 0; _s491 < args.params[_s486].hardwareCharacteristics.tags.length; _s491++) {
        params['params'][_s486]['hardware-characteristics']['tags'][_s491] = args.params[_s486].hardwareCharacteristics.tags[_s491] || undefined;
      }
      params['params'][_s486]['hardware-characteristics']['availability-zone'] = args.params[_s486].hardwareCharacteristics.availabilityZone || undefined;
      params['params'][_s486]['addresses'] = [];
      args.params[_s486].addresses = args.params[_s486].addresses || [];
      for (let _s492 = 0; _s492 < args.params[_s486].addresses.length; _s492++) {
        // github.com/juju/juju/apiserver/params#Address
        params['params'][_s486]['addresses'][_s492] = {};
        args.params[_s486].addresses[_s492] = args.params[_s486].addresses[_s492] || {};
        params['params'][_s486]['addresses'][_s492]['value'] = args.params[_s486].addresses[_s492].value;
        params['params'][_s486]['addresses'][_s492]['type'] = args.params[_s486].addresses[_s492].type;
        params['params'][_s486]['addresses'][_s492]['scope'] = args.params[_s486].addresses[_s492].scope;
        params['params'][_s486]['addresses'][_s492]['space-name'] = args.params[_s486].addresses[_s492].spaceName || undefined;
      }
    }
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'AddMachinesV2',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      // Handle the response.
      let result;
      // github.com/juju/juju/apiserver/params#AddMachinesResults
      result = {};
      resp = resp || {};
      result.machines = [];
      resp['machines'] = resp['machines'] || [];
      for (let _s493 = 0; _s493 < resp['machines'].length; _s493++) {
        // github.com/juju/juju/apiserver/params#AddMachinesResult
        result.machines[_s493] = {};
        resp['machines'][_s493] = resp['machines'][_s493] || {};
        result.machines[_s493].machine = resp['machines'][_s493]['machine'];
        // github.com/juju/juju/apiserver/params#Error
        result.machines[_s493].error = {};
        resp['machines'][_s493]['error'] = resp['machines'][_s493]['error'] || {};
        result.machines[_s493].error.message = resp['machines'][_s493]['error']['message'];
        result.machines[_s493].error.code = resp['machines'][_s493]['error']['code'];
        // github.com/juju/juju/apiserver/params#ErrorInfo
        result.machines[_s493].error.info = {};
        resp['machines'][_s493]['error']['info'] = resp['machines'][_s493]['error']['info'] || {};
        // gopkg.in/macaroon.v2-unstable#Macaroon
        result.machines[_s493].error.info.macaroon = {};
        resp['machines'][_s493]['error']['info']['macaroon'] = resp['machines'][_s493]['error']['info']['macaroon'] || {};
        result.machines[_s493].error.info.macaroon = resp['machines'][_s493]['error']['info']['macaroon'];
        result.machines[_s493].error.info.macaroonPath = resp['machines'][_s493]['error']['info']['macaroon-path'] || undefined;
      }
      callback(null, result);
    });
  }

  /**
    AgentVersion returns the current version that the API server is running.

    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          version: {
            major: int,
            minor: int,
            tag: string,
            patch: int,
            build: int
          }
        }
  */
  agentVersion(callback) {
    const params = {};
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'AgentVersion',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      // Handle the response.
      let result;
      // github.com/juju/juju/apiserver/params#AgentVersionResult
      result = {};
      resp = resp || {};
      // github.com/juju/version#Number
      result.version = {};
      resp['version'] = resp['version'] || {};
      result.version.major = resp['version']['Major'];
      result.version.minor = resp['version']['Minor'];
      result.version.tag = resp['version']['Tag'];
      result.version.patch = resp['version']['Patch'];
      result.version.build = resp['version']['Build'];
      callback(null, result);
    });
  }

  /**
    CACert returns the certificate used to validate the state connection.

    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          result: []int
        }
  */
  caCert(callback) {
    const params = {};
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'CACert',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      // Handle the response.
      let result;
      // github.com/juju/juju/apiserver/params#BytesResult
      result = {};
      resp = resp || {};
      result.result = [];
      resp['result'] = resp['result'] || [];
      for (let _s494 = 0; _s494 < resp['result'].length; _s494++) {
        result.result[_s494] = resp['result'][_s494] || undefined;
      }
      callback(null, result);
    });
  }

  /**
    DestroyMachines removes a given set of machines.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          machineNames: []string,
          force: bool
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error or null if the operation succeeded.
  */
  destroyMachines(args, callback) {
    // Prepare request parameters.
    let params;
    // github.com/juju/juju/apiserver/params#DestroyMachines
    params = {};
    args = args || {};
    params['machine-names'] = [];
    args.machineNames = args.machineNames || [];
    for (let _s495 = 0; _s495 < args.machineNames.length; _s495++) {
      params['machine-names'][_s495] = args.machineNames[_s495] || undefined;
    }
    params['force'] = args.force;
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'DestroyMachines',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      callback(null, {});
    });
  }

  /**
    FindTools returns a List containing all tools matching the given
    parameters.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          number: {
            major: int,
            minor: int,
            tag: string,
            patch: int,
            build: int
          },
          major: int,
          minor: int,
          arch: string,
          series: string,
          agentstream: string
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          list: []{
            version: {
              number: {
                major: int,
                minor: int,
                tag: string,
                patch: int,
                build: int
              },
              series: string,
              arch: string
            },
            url: string,
            sha256: string,
            size: int
          },
          error: {
            message: string,
            code: string,
            info: {
              macaroon: <object>,
              macaroonPath: string
            }
          }
        }
  */
  findTools(args, callback) {
    // Prepare request parameters.
    let params;
    // github.com/juju/juju/apiserver/params#FindToolsParams
    params = {};
    args = args || {};
    // github.com/juju/version#Number
    params['number'] = {};
    args.number = args.number || {};
    params['number']['Major'] = args.number.major;
    params['number']['Minor'] = args.number.minor;
    params['number']['Tag'] = args.number.tag;
    params['number']['Patch'] = args.number.patch;
    params['number']['Build'] = args.number.build;
    params['major'] = args.major;
    params['minor'] = args.minor;
    params['arch'] = args.arch;
    params['series'] = args.series;
    params['agentstream'] = args.agentstream;
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'FindTools',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      // Handle the response.
      let result;
      // github.com/juju/juju/apiserver/params#FindToolsResult
      result = {};
      resp = resp || {};
      // github.com/juju/juju/tools#List
      result.list = [];
      resp['list'] = resp['list'] || [];
      for (let _s496 = 0; _s496 < resp['list'].length; _s496++) {
        // github.com/juju/juju/tools#Tools
        result.list[_s496] = {};
        resp['list'][_s496] = resp['list'][_s496] || {};
        // github.com/juju/version#Binary
        result.list[_s496].version = {};
        resp['list'][_s496]['version'] = resp['list'][_s496]['version'] || {};
        // github.com/juju/version#Number
        result.list[_s496].version.number = {};
        resp['list'][_s496]['version']['Number'] = resp['list'][_s496]['version']['Number'] || {};
        result.list[_s496].version.number.major = resp['list'][_s496]['version']['Number']['Major'];
        result.list[_s496].version.number.minor = resp['list'][_s496]['version']['Number']['Minor'];
        result.list[_s496].version.number.tag = resp['list'][_s496]['version']['Number']['Tag'];
        result.list[_s496].version.number.patch = resp['list'][_s496]['version']['Number']['Patch'];
        result.list[_s496].version.number.build = resp['list'][_s496]['version']['Number']['Build'];
        result.list[_s496].version.series = resp['list'][_s496]['version']['Series'];
        result.list[_s496].version.arch = resp['list'][_s496]['version']['Arch'];
        result.list[_s496].url = resp['list'][_s496]['url'];
        result.list[_s496].sha256 = resp['list'][_s496]['sha256'] || undefined;
        result.list[_s496].size = resp['list'][_s496]['size'];
      }
      // github.com/juju/juju/apiserver/params#Error
      result.error = {};
      resp['error'] = resp['error'] || {};
      result.error.message = resp['error']['message'];
      result.error.code = resp['error']['code'];
      // github.com/juju/juju/apiserver/params#ErrorInfo
      result.error.info = {};
      resp['error']['info'] = resp['error']['info'] || {};
      // gopkg.in/macaroon.v2-unstable#Macaroon
      result.error.info.macaroon = {};
      resp['error']['info']['macaroon'] = resp['error']['info']['macaroon'] || {};
      result.error.info.macaroon = resp['error']['info']['macaroon'];
      result.error.info.macaroonPath = resp['error']['info']['macaroon-path'] || undefined;
      callback(null, result);
    });
  }

  /**
    FullStatus gives the information needed for juju status over the api

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          patterns: []string
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          model: {
            name: string,
            type: string,
            cloudTag: string,
            region: string,
            version: string,
            availableVersion: string,
            modelStatus: {
              status: string,
              info: string,
              data: map[string]anything,
              since: time,
              kind: string,
              version: string,
              life: string,
              err: anything
            },
            meterStatus: {
              color: string,
              message: string
            },
            sla: string
          },
          machines: map[string]{
            agentStatus: {
              status: string,
              info: string,
              data: map[string]anything,
              since: time,
              kind: string,
              version: string,
              life: string,
              err: anything
            },
            instanceStatus: {
              status: string,
              info: string,
              data: map[string]anything,
              since: time,
              kind: string,
              version: string,
              life: string,
              err: anything
            },
            dnsName: string,
            ipAddresses: []string,
            instanceId: string,
            series: string,
            id: string,
            networkInterfaces: map[string]{
              ipAddresses: []string,
              macAddress: string,
              gateway: string,
              dnsNameservers: []string,
              space: string,
              isUp: bool
            },
            containers: map[string]<github.com/juju/juju/apiserver/params#machinestatus again>,
            constraints: string,
            hardware: string,
            jobs: []string,
            hasVote: bool,
            wantsVote: bool
          },
          applications: map[string]{
            err: anything,
            charm: string,
            series: string,
            exposed: bool,
            life: string,
            relations: map[string][]string,
            canUpgradeTo: string,
            subordinateTo: []string,
            units: map[string]{
              agentStatus: {
                status: string,
                info: string,
                data: map[string]anything,
                since: time,
                kind: string,
                version: string,
                life: string,
                err: anything
              },
              workloadStatus: {
                status: string,
                info: string,
                data: map[string]anything,
                since: time,
                kind: string,
                version: string,
                life: string,
                err: anything
              },
              workloadVersion: string,
              machine: string,
              openedPorts: []string,
              publicAddress: string,
              charm: string,
              subordinates: map[string]<github.com/juju/juju/apiserver/params#unitstatus again>,
              leader: bool,
              providerId: string,
              address: string
            },
            meterStatuses: map[string]{
              color: string,
              message: string
            },
            status: {
              status: string,
              info: string,
              data: map[string]anything,
              since: time,
              kind: string,
              version: string,
              life: string,
              err: anything
            },
            workloadVersion: string,
            endpointBindings: map[string]string,
            providerId: string,
            publicAddress: string
          },
          remoteApplications: map[string]{
            err: anything,
            offerUrl: string,
            offerName: string,
            endpoints: []{
              name: string,
              role: string,
              interface: string,
              limit: int
            },
            life: string,
            relations: map[string][]string,
            status: {
              status: string,
              info: string,
              data: map[string]anything,
              since: time,
              kind: string,
              version: string,
              life: string,
              err: anything
            }
          },
          offers: map[string]{
            err: anything,
            offerName: string,
            applicationName: string,
            charm: string,
            endpoints: map[string]{
              name: string,
              role: string,
              interface: string,
              limit: int
            },
            activeConnectedCount: int,
            totalConnectedCount: int
          },
          relations: []{
            id: int,
            key: string,
            interface: string,
            scope: string,
            endpoints: []{
              application: string,
              name: string,
              role: string,
              subordinate: bool
            },
            status: {
              status: string,
              info: string,
              data: map[string]anything,
              since: time,
              kind: string,
              version: string,
              life: string,
              err: anything
            }
          },
          controllerTimestamp: time
        }
  */
  fullStatus(args, callback) {
    // Prepare request parameters.
    let params;
    // github.com/juju/juju/apiserver/params#StatusParams
    params = {};
    args = args || {};
    params['patterns'] = [];
    args.patterns = args.patterns || [];
    for (let _s497 = 0; _s497 < args.patterns.length; _s497++) {
      params['patterns'][_s497] = args.patterns[_s497] || undefined;
    }
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'FullStatus',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      // Handle the response.
      let result;
      // github.com/juju/juju/apiserver/params#FullStatus
      result = {};
      resp = resp || {};
      // github.com/juju/juju/apiserver/params#ModelStatusInfo
      result.model = {};
      resp['model'] = resp['model'] || {};
      result.model.name = resp['model']['name'];
      result.model.type = resp['model']['type'];
      result.model.cloudTag = resp['model']['cloud-tag'];
      result.model.region = resp['model']['region'] || undefined;
      result.model.version = resp['model']['version'];
      result.model.availableVersion = resp['model']['available-version'];
      // github.com/juju/juju/apiserver/params#DetailedStatus
      result.model.modelStatus = {};
      resp['model']['model-status'] = resp['model']['model-status'] || {};
      result.model.modelStatus.status = resp['model']['model-status']['status'];
      result.model.modelStatus.info = resp['model']['model-status']['info'];
      resp['model']['model-status']['data'] = resp['model']['model-status']['data'] || {};
      for (let _m152 in resp['model']['model-status']['data']) {
        result.model.modelStatus.data[_m152] = resp['model']['model-status']['data'][_m152];
      }
      // time#Time
      result.model.modelStatus.since = resp['model']['model-status']['since'];
      result.model.modelStatus.kind = resp['model']['model-status']['kind'];
      result.model.modelStatus.version = resp['model']['model-status']['version'];
      result.model.modelStatus.life = resp['model']['model-status']['life'];
      result.model.modelStatus.err = resp['model']['model-status']['err'] || undefined;
      // github.com/juju/juju/apiserver/params#MeterStatus
      result.model.meterStatus = {};
      resp['model']['meter-status'] = resp['model']['meter-status'] || {};
      result.model.meterStatus.color = resp['model']['meter-status']['color'];
      result.model.meterStatus.message = resp['model']['meter-status']['message'];
      result.model.sla = resp['model']['sla'];
      resp['machines'] = resp['machines'] || {};
      for (let _m153 in resp['machines']) {
        // github.com/juju/juju/apiserver/params#MachineStatus
        result.machines[_m153] = {};
        resp['machines'][_m153] = resp['machines'][_m153] || {};
        // github.com/juju/juju/apiserver/params#DetailedStatus
        result.machines[_m153].agentStatus = {};
        resp['machines'][_m153]['agent-status'] = resp['machines'][_m153]['agent-status'] || {};
        result.machines[_m153].agentStatus.status = resp['machines'][_m153]['agent-status']['status'];
        result.machines[_m153].agentStatus.info = resp['machines'][_m153]['agent-status']['info'];
        resp['machines'][_m153]['agent-status']['data'] = resp['machines'][_m153]['agent-status']['data'] || {};
        for (let _m154 in resp['machines'][_m153]['agent-status']['data']) {
          result.machines[_m153].agentStatus.data[_m154] = resp['machines'][_m153]['agent-status']['data'][_m154];
        }
        // time#Time
        result.machines[_m153].agentStatus.since = resp['machines'][_m153]['agent-status']['since'];
        result.machines[_m153].agentStatus.kind = resp['machines'][_m153]['agent-status']['kind'];
        result.machines[_m153].agentStatus.version = resp['machines'][_m153]['agent-status']['version'];
        result.machines[_m153].agentStatus.life = resp['machines'][_m153]['agent-status']['life'];
        result.machines[_m153].agentStatus.err = resp['machines'][_m153]['agent-status']['err'] || undefined;
        // github.com/juju/juju/apiserver/params#DetailedStatus
        result.machines[_m153].instanceStatus = {};
        resp['machines'][_m153]['instance-status'] = resp['machines'][_m153]['instance-status'] || {};
        result.machines[_m153].instanceStatus.status = resp['machines'][_m153]['instance-status']['status'];
        result.machines[_m153].instanceStatus.info = resp['machines'][_m153]['instance-status']['info'];
        resp['machines'][_m153]['instance-status']['data'] = resp['machines'][_m153]['instance-status']['data'] || {};
        for (let _m155 in resp['machines'][_m153]['instance-status']['data']) {
          result.machines[_m153].instanceStatus.data[_m155] = resp['machines'][_m153]['instance-status']['data'][_m155];
        }
        // time#Time
        result.machines[_m153].instanceStatus.since = resp['machines'][_m153]['instance-status']['since'];
        result.machines[_m153].instanceStatus.kind = resp['machines'][_m153]['instance-status']['kind'];
        result.machines[_m153].instanceStatus.version = resp['machines'][_m153]['instance-status']['version'];
        result.machines[_m153].instanceStatus.life = resp['machines'][_m153]['instance-status']['life'];
        result.machines[_m153].instanceStatus.err = resp['machines'][_m153]['instance-status']['err'] || undefined;
        result.machines[_m153].dnsName = resp['machines'][_m153]['dns-name'];
        result.machines[_m153].ipAddresses = [];
        resp['machines'][_m153]['ip-addresses'] = resp['machines'][_m153]['ip-addresses'] || [];
        for (let _s498 = 0; _s498 < resp['machines'][_m153]['ip-addresses'].length; _s498++) {
          result.machines[_m153].ipAddresses[_s498] = resp['machines'][_m153]['ip-addresses'][_s498] || undefined;
        }
        // github.com/juju/juju/instance#Id
        result.machines[_m153].instanceId = resp['machines'][_m153]['instance-id'];
        result.machines[_m153].series = resp['machines'][_m153]['series'];
        result.machines[_m153].id = resp['machines'][_m153]['id'];
        resp['machines'][_m153]['network-interfaces'] = resp['machines'][_m153]['network-interfaces'] || {};
        for (let _m156 in resp['machines'][_m153]['network-interfaces']) {
          // github.com/juju/juju/apiserver/params#NetworkInterface
          result.machines[_m153].networkInterfaces[_m156] = {};
          resp['machines'][_m153]['network-interfaces'][_m156] = resp['machines'][_m153]['network-interfaces'][_m156] || {};
          result.machines[_m153].networkInterfaces[_m156].ipAddresses = [];
          resp['machines'][_m153]['network-interfaces'][_m156]['ip-addresses'] = resp['machines'][_m153]['network-interfaces'][_m156]['ip-addresses'] || [];
          for (let _s499 = 0; _s499 < resp['machines'][_m153]['network-interfaces'][_m156]['ip-addresses'].length; _s499++) {
            result.machines[_m153].networkInterfaces[_m156].ipAddresses[_s499] = resp['machines'][_m153]['network-interfaces'][_m156]['ip-addresses'][_s499] || undefined;
          }
          result.machines[_m153].networkInterfaces[_m156].macAddress = resp['machines'][_m153]['network-interfaces'][_m156]['mac-address'];
          result.machines[_m153].networkInterfaces[_m156].gateway = resp['machines'][_m153]['network-interfaces'][_m156]['gateway'] || undefined;
          result.machines[_m153].networkInterfaces[_m156].dnsNameservers = [];
          resp['machines'][_m153]['network-interfaces'][_m156]['dns-nameservers'] = resp['machines'][_m153]['network-interfaces'][_m156]['dns-nameservers'] || [];
          for (let _s500 = 0; _s500 < resp['machines'][_m153]['network-interfaces'][_m156]['dns-nameservers'].length; _s500++) {
            result.machines[_m153].networkInterfaces[_m156].dnsNameservers[_s500] = resp['machines'][_m153]['network-interfaces'][_m156]['dns-nameservers'][_s500] || undefined;
          }
          result.machines[_m153].networkInterfaces[_m156].space = resp['machines'][_m153]['network-interfaces'][_m156]['space'] || undefined;
          result.machines[_m153].networkInterfaces[_m156].isUp = resp['machines'][_m153]['network-interfaces'][_m156]['is-up'];
        }
        resp['machines'][_m153]['containers'] = resp['machines'][_m153]['containers'] || {};
        for (let _m157 in resp['machines'][_m153]['containers']) {
          // github.com/juju/juju/apiserver/params#MachineStatus
          // TODO: handle recursive type referencing github.com/juju/juju/apiserver/params#MachineStatus.
          result.machines[_m153].containers[_m157] = resp['machines'][_m153]['containers'][_m157];
        }
        result.machines[_m153].constraints = resp['machines'][_m153]['constraints'];
        result.machines[_m153].hardware = resp['machines'][_m153]['hardware'];
        result.machines[_m153].jobs = [];
        resp['machines'][_m153]['jobs'] = resp['machines'][_m153]['jobs'] || [];
        for (let _s501 = 0; _s501 < resp['machines'][_m153]['jobs'].length; _s501++) {
          // github.com/juju/juju/state/multiwatcher#MachineJob
          result.machines[_m153].jobs[_s501] = resp['machines'][_m153]['jobs'][_s501] || undefined;
        }
        result.machines[_m153].hasVote = resp['machines'][_m153]['has-vote'];
        result.machines[_m153].wantsVote = resp['machines'][_m153]['wants-vote'];
      }
      resp['applications'] = resp['applications'] || {};
      for (let _m158 in resp['applications']) {
        // github.com/juju/juju/apiserver/params#ApplicationStatus
        result.applications[_m158] = {};
        resp['applications'][_m158] = resp['applications'][_m158] || {};
        result.applications[_m158].err = resp['applications'][_m158]['err'] || undefined;
        result.applications[_m158].charm = resp['applications'][_m158]['charm'];
        result.applications[_m158].series = resp['applications'][_m158]['series'];
        result.applications[_m158].exposed = resp['applications'][_m158]['exposed'];
        result.applications[_m158].life = resp['applications'][_m158]['life'];
        resp['applications'][_m158]['relations'] = resp['applications'][_m158]['relations'] || {};
        for (let _m159 in resp['applications'][_m158]['relations']) {
          result.applications[_m158].relations[_m159] = [];
          resp['applications'][_m158]['relations'][_m159] = resp['applications'][_m158]['relations'][_m159] || [];
          for (let _s502 = 0; _s502 < resp['applications'][_m158]['relations'][_m159].length; _s502++) {
            result.applications[_m158].relations[_m159][_s502] = resp['applications'][_m158]['relations'][_m159][_s502] || undefined;
          }
        }
        result.applications[_m158].canUpgradeTo = resp['applications'][_m158]['can-upgrade-to'];
        result.applications[_m158].subordinateTo = [];
        resp['applications'][_m158]['subordinate-to'] = resp['applications'][_m158]['subordinate-to'] || [];
        for (let _s503 = 0; _s503 < resp['applications'][_m158]['subordinate-to'].length; _s503++) {
          result.applications[_m158].subordinateTo[_s503] = resp['applications'][_m158]['subordinate-to'][_s503] || undefined;
        }
        resp['applications'][_m158]['units'] = resp['applications'][_m158]['units'] || {};
        for (let _m160 in resp['applications'][_m158]['units']) {
          // github.com/juju/juju/apiserver/params#UnitStatus
          result.applications[_m158].units[_m160] = {};
          resp['applications'][_m158]['units'][_m160] = resp['applications'][_m158]['units'][_m160] || {};
          // github.com/juju/juju/apiserver/params#DetailedStatus
          result.applications[_m158].units[_m160].agentStatus = {};
          resp['applications'][_m158]['units'][_m160]['agent-status'] = resp['applications'][_m158]['units'][_m160]['agent-status'] || {};
          result.applications[_m158].units[_m160].agentStatus.status = resp['applications'][_m158]['units'][_m160]['agent-status']['status'];
          result.applications[_m158].units[_m160].agentStatus.info = resp['applications'][_m158]['units'][_m160]['agent-status']['info'];
          resp['applications'][_m158]['units'][_m160]['agent-status']['data'] = resp['applications'][_m158]['units'][_m160]['agent-status']['data'] || {};
          for (let _m161 in resp['applications'][_m158]['units'][_m160]['agent-status']['data']) {
            result.applications[_m158].units[_m160].agentStatus.data[_m161] = resp['applications'][_m158]['units'][_m160]['agent-status']['data'][_m161];
          }
          // time#Time
          result.applications[_m158].units[_m160].agentStatus.since = resp['applications'][_m158]['units'][_m160]['agent-status']['since'];
          result.applications[_m158].units[_m160].agentStatus.kind = resp['applications'][_m158]['units'][_m160]['agent-status']['kind'];
          result.applications[_m158].units[_m160].agentStatus.version = resp['applications'][_m158]['units'][_m160]['agent-status']['version'];
          result.applications[_m158].units[_m160].agentStatus.life = resp['applications'][_m158]['units'][_m160]['agent-status']['life'];
          result.applications[_m158].units[_m160].agentStatus.err = resp['applications'][_m158]['units'][_m160]['agent-status']['err'] || undefined;
          // github.com/juju/juju/apiserver/params#DetailedStatus
          result.applications[_m158].units[_m160].workloadStatus = {};
          resp['applications'][_m158]['units'][_m160]['workload-status'] = resp['applications'][_m158]['units'][_m160]['workload-status'] || {};
          result.applications[_m158].units[_m160].workloadStatus.status = resp['applications'][_m158]['units'][_m160]['workload-status']['status'];
          result.applications[_m158].units[_m160].workloadStatus.info = resp['applications'][_m158]['units'][_m160]['workload-status']['info'];
          resp['applications'][_m158]['units'][_m160]['workload-status']['data'] = resp['applications'][_m158]['units'][_m160]['workload-status']['data'] || {};
          for (let _m162 in resp['applications'][_m158]['units'][_m160]['workload-status']['data']) {
            result.applications[_m158].units[_m160].workloadStatus.data[_m162] = resp['applications'][_m158]['units'][_m160]['workload-status']['data'][_m162];
          }
          // time#Time
          result.applications[_m158].units[_m160].workloadStatus.since = resp['applications'][_m158]['units'][_m160]['workload-status']['since'];
          result.applications[_m158].units[_m160].workloadStatus.kind = resp['applications'][_m158]['units'][_m160]['workload-status']['kind'];
          result.applications[_m158].units[_m160].workloadStatus.version = resp['applications'][_m158]['units'][_m160]['workload-status']['version'];
          result.applications[_m158].units[_m160].workloadStatus.life = resp['applications'][_m158]['units'][_m160]['workload-status']['life'];
          result.applications[_m158].units[_m160].workloadStatus.err = resp['applications'][_m158]['units'][_m160]['workload-status']['err'] || undefined;
          result.applications[_m158].units[_m160].workloadVersion = resp['applications'][_m158]['units'][_m160]['workload-version'];
          result.applications[_m158].units[_m160].machine = resp['applications'][_m158]['units'][_m160]['machine'];
          result.applications[_m158].units[_m160].openedPorts = [];
          resp['applications'][_m158]['units'][_m160]['opened-ports'] = resp['applications'][_m158]['units'][_m160]['opened-ports'] || [];
          for (let _s504 = 0; _s504 < resp['applications'][_m158]['units'][_m160]['opened-ports'].length; _s504++) {
            result.applications[_m158].units[_m160].openedPorts[_s504] = resp['applications'][_m158]['units'][_m160]['opened-ports'][_s504] || undefined;
          }
          result.applications[_m158].units[_m160].publicAddress = resp['applications'][_m158]['units'][_m160]['public-address'];
          result.applications[_m158].units[_m160].charm = resp['applications'][_m158]['units'][_m160]['charm'];
          resp['applications'][_m158]['units'][_m160]['subordinates'] = resp['applications'][_m158]['units'][_m160]['subordinates'] || {};
          for (let _m163 in resp['applications'][_m158]['units'][_m160]['subordinates']) {
            // github.com/juju/juju/apiserver/params#UnitStatus
            // TODO: handle recursive type referencing github.com/juju/juju/apiserver/params#UnitStatus.
            result.applications[_m158].units[_m160].subordinates[_m163] = resp['applications'][_m158]['units'][_m160]['subordinates'][_m163];
          }
          result.applications[_m158].units[_m160].leader = resp['applications'][_m158]['units'][_m160]['leader'] || undefined;
          result.applications[_m158].units[_m160].providerId = resp['applications'][_m158]['units'][_m160]['provider-id'] || undefined;
          result.applications[_m158].units[_m160].address = resp['applications'][_m158]['units'][_m160]['address'] || undefined;
        }
        resp['applications'][_m158]['meter-statuses'] = resp['applications'][_m158]['meter-statuses'] || {};
        for (let _m164 in resp['applications'][_m158]['meter-statuses']) {
          // github.com/juju/juju/apiserver/params#MeterStatus
          result.applications[_m158].meterStatuses[_m164] = {};
          resp['applications'][_m158]['meter-statuses'][_m164] = resp['applications'][_m158]['meter-statuses'][_m164] || {};
          result.applications[_m158].meterStatuses[_m164].color = resp['applications'][_m158]['meter-statuses'][_m164]['color'];
          result.applications[_m158].meterStatuses[_m164].message = resp['applications'][_m158]['meter-statuses'][_m164]['message'];
        }
        // github.com/juju/juju/apiserver/params#DetailedStatus
        result.applications[_m158].status = {};
        resp['applications'][_m158]['status'] = resp['applications'][_m158]['status'] || {};
        result.applications[_m158].status.status = resp['applications'][_m158]['status']['status'];
        result.applications[_m158].status.info = resp['applications'][_m158]['status']['info'];
        resp['applications'][_m158]['status']['data'] = resp['applications'][_m158]['status']['data'] || {};
        for (let _m165 in resp['applications'][_m158]['status']['data']) {
          result.applications[_m158].status.data[_m165] = resp['applications'][_m158]['status']['data'][_m165];
        }
        // time#Time
        result.applications[_m158].status.since = resp['applications'][_m158]['status']['since'];
        result.applications[_m158].status.kind = resp['applications'][_m158]['status']['kind'];
        result.applications[_m158].status.version = resp['applications'][_m158]['status']['version'];
        result.applications[_m158].status.life = resp['applications'][_m158]['status']['life'];
        result.applications[_m158].status.err = resp['applications'][_m158]['status']['err'] || undefined;
        result.applications[_m158].workloadVersion = resp['applications'][_m158]['workload-version'];
        resp['applications'][_m158]['endpoint-bindings'] = resp['applications'][_m158]['endpoint-bindings'] || {};
        for (let _m166 in resp['applications'][_m158]['endpoint-bindings']) {
          result.applications[_m158].endpointBindings[_m166] = resp['applications'][_m158]['endpoint-bindings'][_m166];
        }
        result.applications[_m158].providerId = resp['applications'][_m158]['provider-id'] || undefined;
        result.applications[_m158].publicAddress = resp['applications'][_m158]['public-address'];
      }
      resp['remote-applications'] = resp['remote-applications'] || {};
      for (let _m167 in resp['remote-applications']) {
        // github.com/juju/juju/apiserver/params#RemoteApplicationStatus
        result.remoteApplications[_m167] = {};
        resp['remote-applications'][_m167] = resp['remote-applications'][_m167] || {};
        result.remoteApplications[_m167].err = resp['remote-applications'][_m167]['err'] || undefined;
        result.remoteApplications[_m167].offerUrl = resp['remote-applications'][_m167]['offer-url'];
        result.remoteApplications[_m167].offerName = resp['remote-applications'][_m167]['offer-name'];
        result.remoteApplications[_m167].endpoints = [];
        resp['remote-applications'][_m167]['endpoints'] = resp['remote-applications'][_m167]['endpoints'] || [];
        for (let _s505 = 0; _s505 < resp['remote-applications'][_m167]['endpoints'].length; _s505++) {
          // github.com/juju/juju/apiserver/params#RemoteEndpoint
          result.remoteApplications[_m167].endpoints[_s505] = {};
          resp['remote-applications'][_m167]['endpoints'][_s505] = resp['remote-applications'][_m167]['endpoints'][_s505] || {};
          result.remoteApplications[_m167].endpoints[_s505].name = resp['remote-applications'][_m167]['endpoints'][_s505]['name'];
          // gopkg.in/juju/charm.v6#RelationRole
          result.remoteApplications[_m167].endpoints[_s505].role = resp['remote-applications'][_m167]['endpoints'][_s505]['role'];
          result.remoteApplications[_m167].endpoints[_s505].interface = resp['remote-applications'][_m167]['endpoints'][_s505]['interface'];
          result.remoteApplications[_m167].endpoints[_s505].limit = resp['remote-applications'][_m167]['endpoints'][_s505]['limit'];
        }
        result.remoteApplications[_m167].life = resp['remote-applications'][_m167]['life'];
        resp['remote-applications'][_m167]['relations'] = resp['remote-applications'][_m167]['relations'] || {};
        for (let _m168 in resp['remote-applications'][_m167]['relations']) {
          result.remoteApplications[_m167].relations[_m168] = [];
          resp['remote-applications'][_m167]['relations'][_m168] = resp['remote-applications'][_m167]['relations'][_m168] || [];
          for (let _s506 = 0; _s506 < resp['remote-applications'][_m167]['relations'][_m168].length; _s506++) {
            result.remoteApplications[_m167].relations[_m168][_s506] = resp['remote-applications'][_m167]['relations'][_m168][_s506] || undefined;
          }
        }
        // github.com/juju/juju/apiserver/params#DetailedStatus
        result.remoteApplications[_m167].status = {};
        resp['remote-applications'][_m167]['status'] = resp['remote-applications'][_m167]['status'] || {};
        result.remoteApplications[_m167].status.status = resp['remote-applications'][_m167]['status']['status'];
        result.remoteApplications[_m167].status.info = resp['remote-applications'][_m167]['status']['info'];
        resp['remote-applications'][_m167]['status']['data'] = resp['remote-applications'][_m167]['status']['data'] || {};
        for (let _m169 in resp['remote-applications'][_m167]['status']['data']) {
          result.remoteApplications[_m167].status.data[_m169] = resp['remote-applications'][_m167]['status']['data'][_m169];
        }
        // time#Time
        result.remoteApplications[_m167].status.since = resp['remote-applications'][_m167]['status']['since'];
        result.remoteApplications[_m167].status.kind = resp['remote-applications'][_m167]['status']['kind'];
        result.remoteApplications[_m167].status.version = resp['remote-applications'][_m167]['status']['version'];
        result.remoteApplications[_m167].status.life = resp['remote-applications'][_m167]['status']['life'];
        result.remoteApplications[_m167].status.err = resp['remote-applications'][_m167]['status']['err'] || undefined;
      }
      resp['offers'] = resp['offers'] || {};
      for (let _m170 in resp['offers']) {
        // github.com/juju/juju/apiserver/params#ApplicationOfferStatus
        result.offers[_m170] = {};
        resp['offers'][_m170] = resp['offers'][_m170] || {};
        result.offers[_m170].err = resp['offers'][_m170]['err'] || undefined;
        result.offers[_m170].offerName = resp['offers'][_m170]['offer-name'];
        result.offers[_m170].applicationName = resp['offers'][_m170]['application-name'];
        result.offers[_m170].charm = resp['offers'][_m170]['charm'];
        resp['offers'][_m170]['endpoints'] = resp['offers'][_m170]['endpoints'] || {};
        for (let _m171 in resp['offers'][_m170]['endpoints']) {
          // github.com/juju/juju/apiserver/params#RemoteEndpoint
          result.offers[_m170].endpoints[_m171] = {};
          resp['offers'][_m170]['endpoints'][_m171] = resp['offers'][_m170]['endpoints'][_m171] || {};
          result.offers[_m170].endpoints[_m171].name = resp['offers'][_m170]['endpoints'][_m171]['name'];
          // gopkg.in/juju/charm.v6#RelationRole
          result.offers[_m170].endpoints[_m171].role = resp['offers'][_m170]['endpoints'][_m171]['role'];
          result.offers[_m170].endpoints[_m171].interface = resp['offers'][_m170]['endpoints'][_m171]['interface'];
          result.offers[_m170].endpoints[_m171].limit = resp['offers'][_m170]['endpoints'][_m171]['limit'];
        }
        result.offers[_m170].activeConnectedCount = resp['offers'][_m170]['active-connected-count'];
        result.offers[_m170].totalConnectedCount = resp['offers'][_m170]['total-connected-count'];
      }
      result.relations = [];
      resp['relations'] = resp['relations'] || [];
      for (let _s507 = 0; _s507 < resp['relations'].length; _s507++) {
        // github.com/juju/juju/apiserver/params#RelationStatus
        result.relations[_s507] = {};
        resp['relations'][_s507] = resp['relations'][_s507] || {};
        result.relations[_s507].id = resp['relations'][_s507]['id'];
        result.relations[_s507].key = resp['relations'][_s507]['key'];
        result.relations[_s507].interface = resp['relations'][_s507]['interface'];
        result.relations[_s507].scope = resp['relations'][_s507]['scope'];
        result.relations[_s507].endpoints = [];
        resp['relations'][_s507]['endpoints'] = resp['relations'][_s507]['endpoints'] || [];
        for (let _s508 = 0; _s508 < resp['relations'][_s507]['endpoints'].length; _s508++) {
          // github.com/juju/juju/apiserver/params#EndpointStatus
          result.relations[_s507].endpoints[_s508] = {};
          resp['relations'][_s507]['endpoints'][_s508] = resp['relations'][_s507]['endpoints'][_s508] || {};
          result.relations[_s507].endpoints[_s508].application = resp['relations'][_s507]['endpoints'][_s508]['application'];
          result.relations[_s507].endpoints[_s508].name = resp['relations'][_s507]['endpoints'][_s508]['name'];
          result.relations[_s507].endpoints[_s508].role = resp['relations'][_s507]['endpoints'][_s508]['role'];
          result.relations[_s507].endpoints[_s508].subordinate = resp['relations'][_s507]['endpoints'][_s508]['subordinate'];
        }
        // github.com/juju/juju/apiserver/params#DetailedStatus
        result.relations[_s507].status = {};
        resp['relations'][_s507]['status'] = resp['relations'][_s507]['status'] || {};
        result.relations[_s507].status.status = resp['relations'][_s507]['status']['status'];
        result.relations[_s507].status.info = resp['relations'][_s507]['status']['info'];
        resp['relations'][_s507]['status']['data'] = resp['relations'][_s507]['status']['data'] || {};
        for (let _m172 in resp['relations'][_s507]['status']['data']) {
          result.relations[_s507].status.data[_m172] = resp['relations'][_s507]['status']['data'][_m172];
        }
        // time#Time
        result.relations[_s507].status.since = resp['relations'][_s507]['status']['since'];
        result.relations[_s507].status.kind = resp['relations'][_s507]['status']['kind'];
        result.relations[_s507].status.version = resp['relations'][_s507]['status']['version'];
        result.relations[_s507].status.life = resp['relations'][_s507]['status']['life'];
        result.relations[_s507].status.err = resp['relations'][_s507]['status']['err'] || undefined;
      }
      // time#Time
      result.controllerTimestamp = resp['controller-timestamp'];
      callback(null, result);
    });
  }

  /**
    GetBundleChanges returns the list of changes required to deploy the given
    bundle data. The changes are sorted by requirements, so that they can
    be applied in order. This call is deprecated, clients should use the
    GetChanges endpoint on the Bundle facade.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          yaml: string
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          changes: []{
            id: string,
            method: string,
            args: []anything,
            requires: []string
          },
          errors: []string
        }
  */
  getBundleChanges(args, callback) {
    // Prepare request parameters.
    let params;
    // github.com/juju/juju/apiserver/params#BundleChangesParams
    params = {};
    args = args || {};
    params['yaml'] = args.yaml;
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'GetBundleChanges',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      // Handle the response.
      let result;
      // github.com/juju/juju/apiserver/params#BundleChangesResults
      result = {};
      resp = resp || {};
      result.changes = [];
      resp['changes'] = resp['changes'] || [];
      for (let _s509 = 0; _s509 < resp['changes'].length; _s509++) {
        // github.com/juju/juju/apiserver/params#BundleChange
        result.changes[_s509] = {};
        resp['changes'][_s509] = resp['changes'][_s509] || {};
        result.changes[_s509].id = resp['changes'][_s509]['id'];
        result.changes[_s509].method = resp['changes'][_s509]['method'];
        result.changes[_s509].args = [];
        resp['changes'][_s509]['args'] = resp['changes'][_s509]['args'] || [];
        for (let _s510 = 0; _s510 < resp['changes'][_s509]['args'].length; _s510++) {
          result.changes[_s509].args[_s510] = resp['changes'][_s509]['args'][_s510] || undefined;
        }
        result.changes[_s509].requires = [];
        resp['changes'][_s509]['requires'] = resp['changes'][_s509]['requires'] || [];
        for (let _s511 = 0; _s511 < resp['changes'][_s509]['requires'].length; _s511++) {
          result.changes[_s509].requires[_s511] = resp['changes'][_s509]['requires'][_s511] || undefined;
        }
      }
      result.errors = [];
      resp['errors'] = resp['errors'] || [];
      for (let _s512 = 0; _s512 < resp['errors'].length; _s512++) {
        result.errors[_s512] = resp['errors'][_s512] || undefined;
      }
      callback(null, result);
    });
  }

  /**
    GetModelConstraints returns the constraints for the model.

    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          constraints: {
            arch: string,
            container: string,
            cores: int,
            cpuPower: int,
            mem: int,
            rootDisk: int,
            tags: []string,
            instanceType: string,
            spaces: []string,
            virtType: string
          }
        }
  */
  getModelConstraints(callback) {
    const params = {};
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'GetModelConstraints',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      // Handle the response.
      let result;
      // github.com/juju/juju/apiserver/params#GetConstraintsResults
      result = {};
      resp = resp || {};
      // github.com/juju/juju/constraints#Value
      result.constraints = {};
      resp['constraints'] = resp['constraints'] || {};
      result.constraints.arch = resp['constraints']['arch'] || undefined;
      // github.com/juju/juju/instance#ContainerType
      result.constraints.container = resp['constraints']['container'] || undefined;
      result.constraints.cores = resp['constraints']['cores'] || undefined;
      result.constraints.cpuPower = resp['constraints']['cpu-power'] || undefined;
      result.constraints.mem = resp['constraints']['mem'] || undefined;
      result.constraints.rootDisk = resp['constraints']['root-disk'] || undefined;
      result.constraints.tags = [];
      resp['constraints']['tags'] = resp['constraints']['tags'] || [];
      for (let _s513 = 0; _s513 < resp['constraints']['tags'].length; _s513++) {
        result.constraints.tags[_s513] = resp['constraints']['tags'][_s513] || undefined;
      }
      result.constraints.instanceType = resp['constraints']['instance-type'] || undefined;
      result.constraints.spaces = [];
      resp['constraints']['spaces'] = resp['constraints']['spaces'] || [];
      for (let _s514 = 0; _s514 < resp['constraints']['spaces'].length; _s514++) {
        result.constraints.spaces[_s514] = resp['constraints']['spaces'][_s514] || undefined;
      }
      result.constraints.virtType = resp['constraints']['virt-type'] || undefined;
      callback(null, result);
    });
  }

  /**
    InjectMachines injects a machine into state with provisioned status.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          params: []{
            series: string,
            constraints: {
              arch: string,
              container: string,
              cores: int,
              cpuPower: int,
              mem: int,
              rootDisk: int,
              tags: []string,
              instanceType: string,
              spaces: []string,
              virtType: string
            },
            jobs: []string,
            disks: []{
              pool: string,
              size: int,
              count: int
            },
            placement: {
              scope: string,
              directive: string
            },
            parentId: string,
            containerType: string,
            instanceId: string,
            nonce: string,
            hardwareCharacteristics: {
              arch: string,
              mem: int,
              rootDisk: int,
              cpuCores: int,
              cpuPower: int,
              tags: []string,
              availabilityZone: string
            },
            addresses: []{
              value: string,
              type: string,
              scope: string,
              spaceName: string
            }
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          machines: []{
            machine: string,
            error: {
              message: string,
              code: string,
              info: {
                macaroon: <object>,
                macaroonPath: string
              }
            }
          }
        }
  */
  injectMachines(args, callback) {
    // Prepare request parameters.
    let params;
    // github.com/juju/juju/apiserver/params#AddMachines
    params = {};
    args = args || {};
    params['params'] = [];
    args.params = args.params || [];
    for (let _s515 = 0; _s515 < args.params.length; _s515++) {
      // github.com/juju/juju/apiserver/params#AddMachineParams
      params['params'][_s515] = {};
      args.params[_s515] = args.params[_s515] || {};
      params['params'][_s515]['series'] = args.params[_s515].series;
      // github.com/juju/juju/constraints#Value
      params['params'][_s515]['constraints'] = {};
      args.params[_s515].constraints = args.params[_s515].constraints || {};
      params['params'][_s515]['constraints']['arch'] = args.params[_s515].constraints.arch || undefined;
      // github.com/juju/juju/instance#ContainerType
      params['params'][_s515]['constraints']['container'] = args.params[_s515].constraints.container || undefined;
      params['params'][_s515]['constraints']['cores'] = args.params[_s515].constraints.cores || undefined;
      params['params'][_s515]['constraints']['cpu-power'] = args.params[_s515].constraints.cpuPower || undefined;
      params['params'][_s515]['constraints']['mem'] = args.params[_s515].constraints.mem || undefined;
      params['params'][_s515]['constraints']['root-disk'] = args.params[_s515].constraints.rootDisk || undefined;
      params['params'][_s515]['constraints']['tags'] = [];
      args.params[_s515].constraints.tags = args.params[_s515].constraints.tags || [];
      for (let _s516 = 0; _s516 < args.params[_s515].constraints.tags.length; _s516++) {
        params['params'][_s515]['constraints']['tags'][_s516] = args.params[_s515].constraints.tags[_s516] || undefined;
      }
      params['params'][_s515]['constraints']['instance-type'] = args.params[_s515].constraints.instanceType || undefined;
      params['params'][_s515]['constraints']['spaces'] = [];
      args.params[_s515].constraints.spaces = args.params[_s515].constraints.spaces || [];
      for (let _s517 = 0; _s517 < args.params[_s515].constraints.spaces.length; _s517++) {
        params['params'][_s515]['constraints']['spaces'][_s517] = args.params[_s515].constraints.spaces[_s517] || undefined;
      }
      params['params'][_s515]['constraints']['virt-type'] = args.params[_s515].constraints.virtType || undefined;
      params['params'][_s515]['jobs'] = [];
      args.params[_s515].jobs = args.params[_s515].jobs || [];
      for (let _s518 = 0; _s518 < args.params[_s515].jobs.length; _s518++) {
        // github.com/juju/juju/state/multiwatcher#MachineJob
        params['params'][_s515]['jobs'][_s518] = args.params[_s515].jobs[_s518] || undefined;
      }
      params['params'][_s515]['disks'] = [];
      args.params[_s515].disks = args.params[_s515].disks || [];
      for (let _s519 = 0; _s519 < args.params[_s515].disks.length; _s519++) {
        // github.com/juju/juju/storage#Constraints
        params['params'][_s515]['disks'][_s519] = {};
        args.params[_s515].disks[_s519] = args.params[_s515].disks[_s519] || {};
        params['params'][_s515]['disks'][_s519]['Pool'] = args.params[_s515].disks[_s519].pool;
        params['params'][_s515]['disks'][_s519]['Size'] = args.params[_s515].disks[_s519].size;
        params['params'][_s515]['disks'][_s519]['Count'] = args.params[_s515].disks[_s519].count;
      }
      // github.com/juju/juju/instance#Placement
      params['params'][_s515]['placement'] = {};
      args.params[_s515].placement = args.params[_s515].placement || {};
      params['params'][_s515]['placement']['scope'] = args.params[_s515].placement.scope;
      params['params'][_s515]['placement']['directive'] = args.params[_s515].placement.directive;
      params['params'][_s515]['parent-id'] = args.params[_s515].parentId;
      // github.com/juju/juju/instance#ContainerType
      params['params'][_s515]['container-type'] = args.params[_s515].containerType;
      // github.com/juju/juju/instance#Id
      params['params'][_s515]['instance-id'] = args.params[_s515].instanceId;
      params['params'][_s515]['nonce'] = args.params[_s515].nonce;
      // github.com/juju/juju/instance#HardwareCharacteristics
      params['params'][_s515]['hardware-characteristics'] = {};
      args.params[_s515].hardwareCharacteristics = args.params[_s515].hardwareCharacteristics || {};
      params['params'][_s515]['hardware-characteristics']['arch'] = args.params[_s515].hardwareCharacteristics.arch || undefined;
      params['params'][_s515]['hardware-characteristics']['mem'] = args.params[_s515].hardwareCharacteristics.mem || undefined;
      params['params'][_s515]['hardware-characteristics']['root-disk'] = args.params[_s515].hardwareCharacteristics.rootDisk || undefined;
      params['params'][_s515]['hardware-characteristics']['cpu-cores'] = args.params[_s515].hardwareCharacteristics.cpuCores || undefined;
      params['params'][_s515]['hardware-characteristics']['cpu-power'] = args.params[_s515].hardwareCharacteristics.cpuPower || undefined;
      params['params'][_s515]['hardware-characteristics']['tags'] = [];
      args.params[_s515].hardwareCharacteristics.tags = args.params[_s515].hardwareCharacteristics.tags || [];
      for (let _s520 = 0; _s520 < args.params[_s515].hardwareCharacteristics.tags.length; _s520++) {
        params['params'][_s515]['hardware-characteristics']['tags'][_s520] = args.params[_s515].hardwareCharacteristics.tags[_s520] || undefined;
      }
      params['params'][_s515]['hardware-characteristics']['availability-zone'] = args.params[_s515].hardwareCharacteristics.availabilityZone || undefined;
      params['params'][_s515]['addresses'] = [];
      args.params[_s515].addresses = args.params[_s515].addresses || [];
      for (let _s521 = 0; _s521 < args.params[_s515].addresses.length; _s521++) {
        // github.com/juju/juju/apiserver/params#Address
        params['params'][_s515]['addresses'][_s521] = {};
        args.params[_s515].addresses[_s521] = args.params[_s515].addresses[_s521] || {};
        params['params'][_s515]['addresses'][_s521]['value'] = args.params[_s515].addresses[_s521].value;
        params['params'][_s515]['addresses'][_s521]['type'] = args.params[_s515].addresses[_s521].type;
        params['params'][_s515]['addresses'][_s521]['scope'] = args.params[_s515].addresses[_s521].scope;
        params['params'][_s515]['addresses'][_s521]['space-name'] = args.params[_s515].addresses[_s521].spaceName || undefined;
      }
    }
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'InjectMachines',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      // Handle the response.
      let result;
      // github.com/juju/juju/apiserver/params#AddMachinesResults
      result = {};
      resp = resp || {};
      result.machines = [];
      resp['machines'] = resp['machines'] || [];
      for (let _s522 = 0; _s522 < resp['machines'].length; _s522++) {
        // github.com/juju/juju/apiserver/params#AddMachinesResult
        result.machines[_s522] = {};
        resp['machines'][_s522] = resp['machines'][_s522] || {};
        result.machines[_s522].machine = resp['machines'][_s522]['machine'];
        // github.com/juju/juju/apiserver/params#Error
        result.machines[_s522].error = {};
        resp['machines'][_s522]['error'] = resp['machines'][_s522]['error'] || {};
        result.machines[_s522].error.message = resp['machines'][_s522]['error']['message'];
        result.machines[_s522].error.code = resp['machines'][_s522]['error']['code'];
        // github.com/juju/juju/apiserver/params#ErrorInfo
        result.machines[_s522].error.info = {};
        resp['machines'][_s522]['error']['info'] = resp['machines'][_s522]['error']['info'] || {};
        // gopkg.in/macaroon.v2-unstable#Macaroon
        result.machines[_s522].error.info.macaroon = {};
        resp['machines'][_s522]['error']['info']['macaroon'] = resp['machines'][_s522]['error']['info']['macaroon'] || {};
        result.machines[_s522].error.info.macaroon = resp['machines'][_s522]['error']['info']['macaroon'];
        result.machines[_s522].error.info.macaroonPath = resp['machines'][_s522]['error']['info']['macaroon-path'] || undefined;
      }
      callback(null, result);
    });
  }

  /**
    ModelGet implements the server-side part of the model-config CLI command.

    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          config: map[string]{
            value: anything,
            source: string
          }
        }
  */
  modelGet(callback) {
    const params = {};
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'ModelGet',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      // Handle the response.
      let result;
      // github.com/juju/juju/apiserver/params#ModelConfigResults
      result = {};
      resp = resp || {};
      resp['config'] = resp['config'] || {};
      for (let _m173 in resp['config']) {
        // github.com/juju/juju/apiserver/params#ConfigValue
        result.config[_m173] = {};
        resp['config'][_m173] = resp['config'][_m173] || {};
        result.config[_m173].value = resp['config'][_m173]['value'];
        result.config[_m173].source = resp['config'][_m173]['source'];
      }
      callback(null, result);
    });
  }

  /**
    ModelInfo returns information about the current model.

    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          name: string,
          type: string,
          uuid: string,
          controllerUuid: string,
          providerType: string,
          defaultSeries: string,
          cloudTag: string,
          cloudRegion: string,
          cloudCredentialTag: string,
          ownerTag: string,
          life: string,
          status: {
            status: string,
            info: string,
            data: map[string]anything,
            since: time
          },
          users: []{
            user: string,
            displayName: string,
            lastConnection: time,
            access: string
          },
          machines: []{
            id: string,
            hardware: {
              arch: string,
              mem: int,
              rootDisk: int,
              cores: int,
              cpuPower: int,
              tags: []string,
              availabilityZone: string
            },
            instanceId: string,
            status: string,
            hasVote: bool,
            wantsVote: bool
          },
          migration: {
            status: string,
            start: time,
            end: time
          },
          sla: {
            level: string,
            owner: string
          },
          agentVersion: {
            major: int,
            minor: int,
            tag: string,
            patch: int,
            build: int
          }
        }
  */
  modelInfo(callback) {
    const params = {};
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'ModelInfo',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      // Handle the response.
      let result;
      // github.com/juju/juju/apiserver/params#ModelInfo
      result = {};
      resp = resp || {};
      result.name = resp['name'];
      result.type = resp['type'];
      result.uuid = resp['uuid'];
      result.controllerUuid = resp['controller-uuid'];
      result.providerType = resp['provider-type'] || undefined;
      result.defaultSeries = resp['default-series'] || undefined;
      result.cloudTag = resp['cloud-tag'];
      result.cloudRegion = resp['cloud-region'] || undefined;
      result.cloudCredentialTag = resp['cloud-credential-tag'] || undefined;
      result.ownerTag = resp['owner-tag'];
      // github.com/juju/juju/apiserver/params#Life
      result.life = resp['life'];
      // github.com/juju/juju/apiserver/params#EntityStatus
      result.status = {};
      resp['status'] = resp['status'] || {};
      // github.com/juju/juju/status#Status
      result.status.status = resp['status']['status'];
      result.status.info = resp['status']['info'];
      resp['status']['data'] = resp['status']['data'] || {};
      for (let _m174 in resp['status']['data']) {
        result.status.data[_m174] = resp['status']['data'][_m174] || undefined;
      }
      // time#Time
      result.status.since = resp['status']['since'];
      result.users = [];
      resp['users'] = resp['users'] || [];
      for (let _s523 = 0; _s523 < resp['users'].length; _s523++) {
        // github.com/juju/juju/apiserver/params#ModelUserInfo
        result.users[_s523] = {};
        resp['users'][_s523] = resp['users'][_s523] || {};
        result.users[_s523].user = resp['users'][_s523]['user'];
        result.users[_s523].displayName = resp['users'][_s523]['display-name'];
        // time#Time
        result.users[_s523].lastConnection = resp['users'][_s523]['last-connection'];
        // github.com/juju/juju/apiserver/params#UserAccessPermission
        result.users[_s523].access = resp['users'][_s523]['access'];
      }
      result.machines = [];
      resp['machines'] = resp['machines'] || [];
      for (let _s524 = 0; _s524 < resp['machines'].length; _s524++) {
        // github.com/juju/juju/apiserver/params#ModelMachineInfo
        result.machines[_s524] = {};
        resp['machines'][_s524] = resp['machines'][_s524] || {};
        result.machines[_s524].id = resp['machines'][_s524]['id'];
        // github.com/juju/juju/apiserver/params#MachineHardware
        result.machines[_s524].hardware = {};
        resp['machines'][_s524]['hardware'] = resp['machines'][_s524]['hardware'] || {};
        result.machines[_s524].hardware.arch = resp['machines'][_s524]['hardware']['arch'] || undefined;
        result.machines[_s524].hardware.mem = resp['machines'][_s524]['hardware']['mem'] || undefined;
        result.machines[_s524].hardware.rootDisk = resp['machines'][_s524]['hardware']['root-disk'] || undefined;
        result.machines[_s524].hardware.cores = resp['machines'][_s524]['hardware']['cores'] || undefined;
        result.machines[_s524].hardware.cpuPower = resp['machines'][_s524]['hardware']['cpu-power'] || undefined;
        result.machines[_s524].hardware.tags = [];
        resp['machines'][_s524]['hardware']['tags'] = resp['machines'][_s524]['hardware']['tags'] || [];
        for (let _s525 = 0; _s525 < resp['machines'][_s524]['hardware']['tags'].length; _s525++) {
          result.machines[_s524].hardware.tags[_s525] = resp['machines'][_s524]['hardware']['tags'][_s525] || undefined;
        }
        result.machines[_s524].hardware.availabilityZone = resp['machines'][_s524]['hardware']['availability-zone'] || undefined;
        result.machines[_s524].instanceId = resp['machines'][_s524]['instance-id'] || undefined;
        result.machines[_s524].status = resp['machines'][_s524]['status'] || undefined;
        result.machines[_s524].hasVote = resp['machines'][_s524]['has-vote'] || undefined;
        result.machines[_s524].wantsVote = resp['machines'][_s524]['wants-vote'] || undefined;
      }
      // github.com/juju/juju/apiserver/params#ModelMigrationStatus
      result.migration = {};
      resp['migration'] = resp['migration'] || {};
      result.migration.status = resp['migration']['status'];
      // time#Time
      result.migration.start = resp['migration']['start'];
      // time#Time
      result.migration.end = resp['migration']['end'] || undefined;
      // github.com/juju/juju/apiserver/params#ModelSLAInfo
      result.sla = {};
      resp['sla'] = resp['sla'] || {};
      result.sla.level = resp['sla']['level'];
      result.sla.owner = resp['sla']['owner'];
      // github.com/juju/version#Number
      result.agentVersion = {};
      resp['agent-version'] = resp['agent-version'] || {};
      result.agentVersion.major = resp['agent-version']['Major'];
      result.agentVersion.minor = resp['agent-version']['Minor'];
      result.agentVersion.tag = resp['agent-version']['Tag'];
      result.agentVersion.patch = resp['agent-version']['Patch'];
      result.agentVersion.build = resp['agent-version']['Build'];
      callback(null, result);
    });
  }

  /**
    ModelSet implements the server-side part of the set-model-config CLI
    command.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          config: map[string]anything
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error or null if the operation succeeded.
  */
  modelSet(args, callback) {
    // Prepare request parameters.
    let params;
    // github.com/juju/juju/apiserver/params#ModelSet
    params = {};
    args = args || {};
    args.config = args.config || {};
    for (let _m175 in args.config) {
      params['config'][_m175] = args.config[_m175];
    }
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'ModelSet',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      callback(null, {});
    });
  }

  /**
    ModelUnset implements the server-side part of the set-model-config CLI
    command.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          keys: []string
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error or null if the operation succeeded.
  */
  modelUnset(args, callback) {
    // Prepare request parameters.
    let params;
    // github.com/juju/juju/apiserver/params#ModelUnset
    params = {};
    args = args || {};
    params['keys'] = [];
    args.keys = args.keys || [];
    for (let _s526 = 0; _s526 < args.keys.length; _s526++) {
      params['keys'][_s526] = args.keys[_s526] || undefined;
    }
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'ModelUnset',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      callback(null, {});
    });
  }

  /**
    ModelUserInfo returns information on all users in the model.

    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            result: {
              user: string,
              displayName: string,
              lastConnection: time,
              access: string
            },
            error: {
              message: string,
              code: string,
              info: {
                macaroon: <object>,
                macaroonPath: string
              }
            }
          }
        }
  */
  modelUserInfo(callback) {
    const params = {};
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'ModelUserInfo',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      // Handle the response.
      let result;
      // github.com/juju/juju/apiserver/params#ModelUserInfoResults
      result = {};
      resp = resp || {};
      result.results = [];
      resp['results'] = resp['results'] || [];
      for (let _s527 = 0; _s527 < resp['results'].length; _s527++) {
        // github.com/juju/juju/apiserver/params#ModelUserInfoResult
        result.results[_s527] = {};
        resp['results'][_s527] = resp['results'][_s527] || {};
        // github.com/juju/juju/apiserver/params#ModelUserInfo
        result.results[_s527].result = {};
        resp['results'][_s527]['result'] = resp['results'][_s527]['result'] || {};
        result.results[_s527].result.user = resp['results'][_s527]['result']['user'];
        result.results[_s527].result.displayName = resp['results'][_s527]['result']['display-name'];
        // time#Time
        result.results[_s527].result.lastConnection = resp['results'][_s527]['result']['last-connection'];
        // github.com/juju/juju/apiserver/params#UserAccessPermission
        result.results[_s527].result.access = resp['results'][_s527]['result']['access'];
        // github.com/juju/juju/apiserver/params#Error
        result.results[_s527].error = {};
        resp['results'][_s527]['error'] = resp['results'][_s527]['error'] || {};
        result.results[_s527].error.message = resp['results'][_s527]['error']['message'];
        result.results[_s527].error.code = resp['results'][_s527]['error']['code'];
        // github.com/juju/juju/apiserver/params#ErrorInfo
        result.results[_s527].error.info = {};
        resp['results'][_s527]['error']['info'] = resp['results'][_s527]['error']['info'] || {};
        // gopkg.in/macaroon.v2-unstable#Macaroon
        result.results[_s527].error.info.macaroon = {};
        resp['results'][_s527]['error']['info']['macaroon'] = resp['results'][_s527]['error']['info']['macaroon'] || {};
        result.results[_s527].error.info.macaroon = resp['results'][_s527]['error']['info']['macaroon'];
        result.results[_s527].error.info.macaroonPath = resp['results'][_s527]['error']['info']['macaroon-path'] || undefined;
      }
      callback(null, result);
    });
  }

  /**
    PrivateAddress implements the server side of Client.PrivateAddress.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          target: string
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          privateAddress: string
        }
  */
  privateAddress(args, callback) {
    // Prepare request parameters.
    let params;
    // github.com/juju/juju/apiserver/params#PrivateAddress
    params = {};
    args = args || {};
    params['target'] = args.target;
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'PrivateAddress',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      // Handle the response.
      let result;
      // github.com/juju/juju/apiserver/params#PrivateAddressResults
      result = {};
      resp = resp || {};
      result.privateAddress = resp['private-address'];
      callback(null, result);
    });
  }

  /**
    ProvisioningScript returns a shell script that, when run, provisions a
    machine agent on the machine executing the script.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          machineId: string,
          nonce: string,
          dataDir: string,
          disablePackageCommands: bool
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          script: string
        }
  */
  provisioningScript(args, callback) {
    // Prepare request parameters.
    let params;
    // github.com/juju/juju/apiserver/params#ProvisioningScriptParams
    params = {};
    args = args || {};
    params['machine-id'] = args.machineId;
    params['nonce'] = args.nonce;
    params['data-dir'] = args.dataDir;
    params['disable-package-commands'] = args.disablePackageCommands;
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'ProvisioningScript',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      // Handle the response.
      let result;
      // github.com/juju/juju/apiserver/params#ProvisioningScriptResult
      result = {};
      resp = resp || {};
      result.script = resp['script'];
      callback(null, result);
    });
  }

  /**
    PublicAddress implements the server side of Client.PublicAddress.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          target: string
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          publicAddress: string
        }
  */
  publicAddress(args, callback) {
    // Prepare request parameters.
    let params;
    // github.com/juju/juju/apiserver/params#PublicAddress
    params = {};
    args = args || {};
    params['target'] = args.target;
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'PublicAddress',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      // Handle the response.
      let result;
      // github.com/juju/juju/apiserver/params#PublicAddressResults
      result = {};
      resp = resp || {};
      result.publicAddress = resp['public-address'];
      callback(null, result);
    });
  }

  /**
    ResolveCharm resolves the best available charm URLs with series, for charm
    locations without a series specified.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          references: []string
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          urls: []{
            url: string,
            error: string
          }
        }
  */
  resolveCharms(args, callback) {
    // Prepare request parameters.
    let params;
    // github.com/juju/juju/apiserver/params#ResolveCharms
    params = {};
    args = args || {};
    params['references'] = [];
    args.references = args.references || [];
    for (let _s528 = 0; _s528 < args.references.length; _s528++) {
      params['references'][_s528] = args.references[_s528] || undefined;
    }
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'ResolveCharms',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      // Handle the response.
      let result;
      // github.com/juju/juju/apiserver/params#ResolveCharmResults
      result = {};
      resp = resp || {};
      result.urls = [];
      resp['urls'] = resp['urls'] || [];
      for (let _s529 = 0; _s529 < resp['urls'].length; _s529++) {
        // github.com/juju/juju/apiserver/params#ResolveCharmResult
        result.urls[_s529] = {};
        resp['urls'][_s529] = resp['urls'][_s529] || {};
        result.urls[_s529].url = resp['urls'][_s529]['url'] || undefined;
        result.urls[_s529].error = resp['urls'][_s529]['error'] || undefined;
      }
      callback(null, result);
    });
  }

  /**
    Resolved implements the server side of Client.Resolved.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          unitName: string,
          retry: bool
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error or null if the operation succeeded.
  */
  resolved(args, callback) {
    // Prepare request parameters.
    let params;
    // github.com/juju/juju/apiserver/params#Resolved
    params = {};
    args = args || {};
    params['unit-name'] = args.unitName;
    params['retry'] = args.retry;
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'Resolved',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      callback(null, {});
    });
  }

  /**
    RetryProvisioning marks a provisioning error as transient on the machines.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          entities: []{
            tag: string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            error: {
              message: string,
              code: string,
              info: {
                macaroon: <object>,
                macaroonPath: string
              }
            }
          }
        }
  */
  retryProvisioning(args, callback) {
    // Prepare request parameters.
    let params;
    // github.com/juju/juju/apiserver/params#Entities
    params = {};
    args = args || {};
    params['entities'] = [];
    args.entities = args.entities || [];
    for (let _s530 = 0; _s530 < args.entities.length; _s530++) {
      // github.com/juju/juju/apiserver/params#Entity
      params['entities'][_s530] = {};
      args.entities[_s530] = args.entities[_s530] || {};
      params['entities'][_s530]['tag'] = args.entities[_s530].tag;
    }
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'RetryProvisioning',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      // Handle the response.
      let result;
      // github.com/juju/juju/apiserver/params#ErrorResults
      result = {};
      resp = resp || {};
      result.results = [];
      resp['results'] = resp['results'] || [];
      for (let _s531 = 0; _s531 < resp['results'].length; _s531++) {
        // github.com/juju/juju/apiserver/params#ErrorResult
        result.results[_s531] = {};
        resp['results'][_s531] = resp['results'][_s531] || {};
        // github.com/juju/juju/apiserver/params#Error
        result.results[_s531].error = {};
        resp['results'][_s531]['error'] = resp['results'][_s531]['error'] || {};
        result.results[_s531].error.message = resp['results'][_s531]['error']['message'];
        result.results[_s531].error.code = resp['results'][_s531]['error']['code'];
        // github.com/juju/juju/apiserver/params#ErrorInfo
        result.results[_s531].error.info = {};
        resp['results'][_s531]['error']['info'] = resp['results'][_s531]['error']['info'] || {};
        // gopkg.in/macaroon.v2-unstable#Macaroon
        result.results[_s531].error.info.macaroon = {};
        resp['results'][_s531]['error']['info']['macaroon'] = resp['results'][_s531]['error']['info']['macaroon'] || {};
        result.results[_s531].error.info.macaroon = resp['results'][_s531]['error']['info']['macaroon'];
        result.results[_s531].error.info.macaroonPath = resp['results'][_s531]['error']['info']['macaroon-path'] || undefined;
      }
      callback(null, result);
    });
  }

  /**
    SLALevel returns the current sla level for the model.

    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          error: {
            message: string,
            code: string,
            info: {
              macaroon: <object>,
              macaroonPath: string
            }
          },
          result: string
        }
  */
  slaLevel(callback) {
    const params = {};
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'SLALevel',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      // Handle the response.
      let result;
      // github.com/juju/juju/apiserver/params#StringResult
      result = {};
      resp = resp || {};
      // github.com/juju/juju/apiserver/params#Error
      result.error = {};
      resp['error'] = resp['error'] || {};
      result.error.message = resp['error']['message'];
      result.error.code = resp['error']['code'];
      // github.com/juju/juju/apiserver/params#ErrorInfo
      result.error.info = {};
      resp['error']['info'] = resp['error']['info'] || {};
      // gopkg.in/macaroon.v2-unstable#Macaroon
      result.error.info.macaroon = {};
      resp['error']['info']['macaroon'] = resp['error']['info']['macaroon'] || {};
      result.error.info.macaroon = resp['error']['info']['macaroon'];
      result.error.info.macaroonPath = resp['error']['info']['macaroon-path'] || undefined;
      result.result = resp['result'];
      callback(null, result);
    });
  }

  /**
    SetModelAgentVersion sets the model agent version.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          version: {
            major: int,
            minor: int,
            tag: string,
            patch: int,
            build: int
          },
          force: bool
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error or null if the operation succeeded.
  */
  setModelAgentVersion(args, callback) {
    // Prepare request parameters.
    let params;
    // github.com/juju/juju/apiserver/params#SetModelAgentVersion
    params = {};
    args = args || {};
    // github.com/juju/version#Number
    params['version'] = {};
    args.version = args.version || {};
    params['version']['Major'] = args.version.major;
    params['version']['Minor'] = args.version.minor;
    params['version']['Tag'] = args.version.tag;
    params['version']['Patch'] = args.version.patch;
    params['version']['Build'] = args.version.build;
    params['force'] = args.force || undefined;
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'SetModelAgentVersion',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      callback(null, {});
    });
  }

  /**
    SetModelConstraints sets the constraints for the model.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          application: string,
          constraints: {
            arch: string,
            container: string,
            cores: int,
            cpuPower: int,
            mem: int,
            rootDisk: int,
            tags: []string,
            instanceType: string,
            spaces: []string,
            virtType: string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error or null if the operation succeeded.
  */
  setModelConstraints(args, callback) {
    // Prepare request parameters.
    let params;
    // github.com/juju/juju/apiserver/params#SetConstraints
    params = {};
    args = args || {};
    params['application'] = args.application;
    // github.com/juju/juju/constraints#Value
    params['constraints'] = {};
    args.constraints = args.constraints || {};
    params['constraints']['arch'] = args.constraints.arch || undefined;
    // github.com/juju/juju/instance#ContainerType
    params['constraints']['container'] = args.constraints.container || undefined;
    params['constraints']['cores'] = args.constraints.cores || undefined;
    params['constraints']['cpu-power'] = args.constraints.cpuPower || undefined;
    params['constraints']['mem'] = args.constraints.mem || undefined;
    params['constraints']['root-disk'] = args.constraints.rootDisk || undefined;
    params['constraints']['tags'] = [];
    args.constraints.tags = args.constraints.tags || [];
    for (let _s532 = 0; _s532 < args.constraints.tags.length; _s532++) {
      params['constraints']['tags'][_s532] = args.constraints.tags[_s532] || undefined;
    }
    params['constraints']['instance-type'] = args.constraints.instanceType || undefined;
    params['constraints']['spaces'] = [];
    args.constraints.spaces = args.constraints.spaces || [];
    for (let _s533 = 0; _s533 < args.constraints.spaces.length; _s533++) {
      params['constraints']['spaces'][_s533] = args.constraints.spaces[_s533] || undefined;
    }
    params['constraints']['virt-type'] = args.constraints.virtType || undefined;
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'SetModelConstraints',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      callback(null, {});
    });
  }

  /**
    SetSLALevel sets the sla level on the model.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          modelslainfo: {
            level: string,
            owner: string
          },
          creds: []int
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error or null if the operation succeeded.
  */
  setSLALevel(args, callback) {
    // Prepare request parameters.
    let params;
    // github.com/juju/juju/apiserver/params#ModelSLA
    params = {};
    args = args || {};
    // github.com/juju/juju/apiserver/params#ModelSLAInfo
    params['ModelSLAInfo'] = {};
    args.modelslainfo = args.modelslainfo || {};
    params['ModelSLAInfo']['level'] = args.modelslainfo.level;
    params['ModelSLAInfo']['owner'] = args.modelslainfo.owner;
    params['creds'] = [];
    args.creds = args.creds || [];
    for (let _s534 = 0; _s534 < args.creds.length; _s534++) {
      params['creds'][_s534] = args.creds[_s534] || undefined;
    }
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'SetSLALevel',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      callback(null, {});
    });
  }

  /**
    StatusHistory returns a slice of past statuses for several entities.

    @param {Object} args Arguments to be provided to Juju, as an object like
      the following:
        {
          requests: []{
            historykind: string,
            size: int,
            filter: {
              size: int,
              date: time,
              delta: int,
              exclude: []string
            },
            tag: string
          }
        }
    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          results: []{
            history: {
              statuses: []{
                status: string,
                info: string,
                data: map[string]anything,
                since: time,
                kind: string,
                version: string,
                life: string,
                err: anything
              },
              error: {
                message: string,
                code: string,
                info: {
                  macaroon: <object>,
                  macaroonPath: string
                }
              }
            },
            error: {
              message: string,
              code: string,
              info: {
                macaroon: <object>,
                macaroonPath: string
              }
            }
          }
        }
  */
  statusHistory(args, callback) {
    // Prepare request parameters.
    let params;
    // github.com/juju/juju/apiserver/params#StatusHistoryRequests
    params = {};
    args = args || {};
    params['requests'] = [];
    args.requests = args.requests || [];
    for (let _s535 = 0; _s535 < args.requests.length; _s535++) {
      // github.com/juju/juju/apiserver/params#StatusHistoryRequest
      params['requests'][_s535] = {};
      args.requests[_s535] = args.requests[_s535] || {};
      params['requests'][_s535]['historyKind'] = args.requests[_s535].historykind;
      params['requests'][_s535]['size'] = args.requests[_s535].size;
      // github.com/juju/juju/apiserver/params#StatusHistoryFilter
      params['requests'][_s535]['filter'] = {};
      args.requests[_s535].filter = args.requests[_s535].filter || {};
      params['requests'][_s535]['filter']['size'] = args.requests[_s535].filter.size;
      // time#Time
      params['requests'][_s535]['filter']['date'] = args.requests[_s535].filter.date;
      // time#Duration
      params['requests'][_s535]['filter']['delta'] = args.requests[_s535].filter.delta;
      params['requests'][_s535]['filter']['exclude'] = [];
      args.requests[_s535].filter.exclude = args.requests[_s535].filter.exclude || [];
      for (let _s536 = 0; _s536 < args.requests[_s535].filter.exclude.length; _s536++) {
        params['requests'][_s535]['filter']['exclude'][_s536] = args.requests[_s535].filter.exclude[_s536] || undefined;
      }
      params['requests'][_s535]['tag'] = args.requests[_s535].tag;
    }
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'StatusHistory',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      // Handle the response.
      let result;
      // github.com/juju/juju/apiserver/params#StatusHistoryResults
      result = {};
      resp = resp || {};
      result.results = [];
      resp['results'] = resp['results'] || [];
      for (let _s537 = 0; _s537 < resp['results'].length; _s537++) {
        // github.com/juju/juju/apiserver/params#StatusHistoryResult
        result.results[_s537] = {};
        resp['results'][_s537] = resp['results'][_s537] || {};
        // github.com/juju/juju/apiserver/params#History
        result.results[_s537].history = {};
        resp['results'][_s537]['history'] = resp['results'][_s537]['history'] || {};
        result.results[_s537].history.statuses = [];
        resp['results'][_s537]['history']['statuses'] = resp['results'][_s537]['history']['statuses'] || [];
        for (let _s538 = 0; _s538 < resp['results'][_s537]['history']['statuses'].length; _s538++) {
          // github.com/juju/juju/apiserver/params#DetailedStatus
          result.results[_s537].history.statuses[_s538] = {};
          resp['results'][_s537]['history']['statuses'][_s538] = resp['results'][_s537]['history']['statuses'][_s538] || {};
          result.results[_s537].history.statuses[_s538].status = resp['results'][_s537]['history']['statuses'][_s538]['status'];
          result.results[_s537].history.statuses[_s538].info = resp['results'][_s537]['history']['statuses'][_s538]['info'];
          resp['results'][_s537]['history']['statuses'][_s538]['data'] = resp['results'][_s537]['history']['statuses'][_s538]['data'] || {};
          for (let _m176 in resp['results'][_s537]['history']['statuses'][_s538]['data']) {
            result.results[_s537].history.statuses[_s538].data[_m176] = resp['results'][_s537]['history']['statuses'][_s538]['data'][_m176];
          }
          // time#Time
          result.results[_s537].history.statuses[_s538].since = resp['results'][_s537]['history']['statuses'][_s538]['since'];
          result.results[_s537].history.statuses[_s538].kind = resp['results'][_s537]['history']['statuses'][_s538]['kind'];
          result.results[_s537].history.statuses[_s538].version = resp['results'][_s537]['history']['statuses'][_s538]['version'];
          result.results[_s537].history.statuses[_s538].life = resp['results'][_s537]['history']['statuses'][_s538]['life'];
          result.results[_s537].history.statuses[_s538].err = resp['results'][_s537]['history']['statuses'][_s538]['err'] || undefined;
        }
        // github.com/juju/juju/apiserver/params#Error
        result.results[_s537].history.error = {};
        resp['results'][_s537]['history']['error'] = resp['results'][_s537]['history']['error'] || {};
        result.results[_s537].history.error.message = resp['results'][_s537]['history']['error']['message'];
        result.results[_s537].history.error.code = resp['results'][_s537]['history']['error']['code'];
        // github.com/juju/juju/apiserver/params#ErrorInfo
        result.results[_s537].history.error.info = {};
        resp['results'][_s537]['history']['error']['info'] = resp['results'][_s537]['history']['error']['info'] || {};
        // gopkg.in/macaroon.v2-unstable#Macaroon
        result.results[_s537].history.error.info.macaroon = {};
        resp['results'][_s537]['history']['error']['info']['macaroon'] = resp['results'][_s537]['history']['error']['info']['macaroon'] || {};
        result.results[_s537].history.error.info.macaroon = resp['results'][_s537]['history']['error']['info']['macaroon'];
        result.results[_s537].history.error.info.macaroonPath = resp['results'][_s537]['history']['error']['info']['macaroon-path'] || undefined;
        // github.com/juju/juju/apiserver/params#Error
        result.results[_s537].error = {};
        resp['results'][_s537]['error'] = resp['results'][_s537]['error'] || {};
        result.results[_s537].error.message = resp['results'][_s537]['error']['message'];
        result.results[_s537].error.code = resp['results'][_s537]['error']['code'];
        // github.com/juju/juju/apiserver/params#ErrorInfo
        result.results[_s537].error.info = {};
        resp['results'][_s537]['error']['info'] = resp['results'][_s537]['error']['info'] || {};
        // gopkg.in/macaroon.v2-unstable#Macaroon
        result.results[_s537].error.info.macaroon = {};
        resp['results'][_s537]['error']['info']['macaroon'] = resp['results'][_s537]['error']['info']['macaroon'] || {};
        result.results[_s537].error.info.macaroon = resp['results'][_s537]['error']['info']['macaroon'];
        result.results[_s537].error.info.macaroonPath = resp['results'][_s537]['error']['info']['macaroon-path'] || undefined;
      }
      callback(null, result);
    });
  }

  /**
    WatchAll initiates a watcher for entities in the connected model.

    @param {Function} callback Called when the response from Juju is available,
      the callback receives an error and the result. If there are no errors,
      the result is provided as an object like the following:
        {
          watcherId: string
        }
  */
  watchAll(callback) {
    const params = {};
    // Prepare the request to the Juju API.
    const req = {
      type: 'Client',
      request: 'WatchAll',
      version: 1,
      params: params
    };
    // Send the request to the server.
    this._transport.write(req, (err, resp) => {
      if (!callback) {
        return;
      }
      if (err) {
        callback(err, {});
        return;
      }
      // Handle the response.
      let result;
      // github.com/juju/juju/apiserver/params#AllWatcherId
      result = {};
      resp = resp || {};
      result.watcherId = resp['watcher-id'];
      callback(null, result);
    });
  }
}


const wrappers = require('../wrappers.js');
if (wrappers.wrapClient) {
  // Decorate the facade class in order to improve user experience.
  ClientV1 = wrappers.wrapClient(ClientV1);
}

module.exports = ClientV1;
